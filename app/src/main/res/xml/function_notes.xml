<?xml version="1.0" encoding="UTF-8"?>
<data>
<item>
<title>
lambda функции
Выражение lambda создает объект и возвращает его в виде результата.Функции могут также создаваться с помощью выражения lambda. Это позволяет создавать встроенные определения функций там, где синтаксис языка не позволяет использовать инструкцию def 
</title>
<content> 
</content>
<print>
</print>
</item> 
<item>
<title>
yield передает объект результата вызывающей программе и запоминает,где был произведен возврат. Функции, известные как генераторы, для передачи возвращаемого значения могут также использовать инструкцию yield и сохранять свое состояние так, чтобы работа функции могла быть возобновлена позднее 
</title>
<content> 
</content>
<print>
</print>
</item> 
<item>
<title>
nonlocal объявляет переменные, находящиеся в области видимости объемлющей функции, без присваивания им значений. В Python 3 появилась новая инструкция nonlocal, позволяющая функциям присваивать значения переменным, находящимся в области видимости синтаксически объемлющей функции. Это позволяет использовать объемлющие функции, как место хранения информации о состоянии – информация восстанавливается в момент вызова функции, при этом отпадает необходимость использовать глобальные переменные. 
</title>
<content> 
</content>
<print>
</print>
</item> 
<item>
<title>
lambda – это выражение, а не инструкция. По этой причине ключевое слово lambda может появляться там, где синтаксис языка Python не позволяет использовать инструкцию def, – внутри литералов или в вызовах функций, например. Кроме того, lambda-выражение возвращает значение (новую функцию), которое при желании можно присвоить переменной, в противовес инструкции def, которая всегда связывает функцию с именем в заголовке, а не возвращает ее в виде результата. 
</title>
<content> 
</content>
<print>
</print>
</item> 
<item>
<title>
Тело lambda – это не блок инструкций, а единственное выражение. Тело lambda-выражения сродни тому, что вы помещаете в инструкцию return внутри определения def, – вы просто вводите результат в виде выражения вместо его явного возврата. Вследствие этого ограничения lambda-выражения менее универсальны, чем инструкция def – в теле lambda-выражения может быть реализована только логика, не использующая такие инструкции, как if. Такая реализация предусмотрена заранее – она ограничивает возможность создания большого числа уровней вложенности программ: lambdaвыражения предназначены для создания простых функций, а инструкции def – для решения более сложных задач. 
</title>
<content> 
</content>
<print>
</print>
</item> 
 
</data>