<?xml version="1.0" encoding="UTF-8"?>
<data>

<item>
<title>
array				Преобразует входные данные (список,кортеж,массив или любую другую последовательность)в ndarray.Тип dtype задается явно или выводится неявно.Входные данные по умолчанию копируются 

asarray 			Преобразует входные данные в ndarray, но не копирует, если на вход уже подан ndarray 

arange 				Аналогична встроенной функции range, но возвращает массив, а не список 

ones, ones_like 	Порождает массив, состоящий из одних единиц, с заданными атрибутами shape и dtype. Функция ones_like принимает другой массив и порождает массив из одних единиц с такими же значениями shape и dtype 

zeros,zeros_like	Аналогичны ones и ones_like, только порождаемый массив состоит из одних нулей  

empty,  empty_like	Создают новые массивы, выделяя под них память, но, в отличие от ones и zeros, не инициализируют ее  

еуе, identity 		Создают единичную квадратную матрицу N х N (элементы на главной диагонали равны 1, все остальные - О) 

</title>
<content> 
</content>
<print>
</print>
</item> 


<item>
<title>
Унарные функции

abs, fabs			Вычислить абсолютное значение целых, вещественных или комплексных элементов массива. Для вещественных данных f abs работает быстрее  

sqrt 				Вычислить квадратный корень из каждого элемента. Эквивалентно arr ** 0.5 

square				Вычислить квадрат каждого элемента. Эквивалентно arr  **  2 

ехр 				Вычислить экспоненту е каждого элемента 

log,log10,			 
log2, loglp 		Натуральный (по основанию е), десятичный, двоичный логарифм и функция log ( 1  +  х)

sign 				Вычислить знак каждого элемента: 1 (для положительных чисел), 0 (для нуля) или -1 (для отрицательных чисел) 

ceil 				Вычислить для каждого элемента наименьшее целое число, не меньшее его 

floor 				Вычислить для каждого элемента наибольшее целое число, не большее его 

rint 				Округлить элементы до ближайшего целого с сохранением dtype 

modf 				Вернуть дробные и целые части массива в виде отдельных массивов 

isnan 				Вернуть булев массив, показывающий, какие значения являются NaN (не числами) 

isfinite, isinf 	Вернуть булев массив, показывающий, какие элементы являются конечными (не inf и   не NaN) или бесконечными соответственно 

cos, cosh, sin, 	 
sinh, tan, tanh 	Обычные и гиперболические тригонометрические функции

arccos, arccosh, 	 
arcsin, arcsinh, 
arctan, arctanh 	Обратные тригонометрические функции

logical_not 		Вычислить значение истинности not  х для каждого элемента. Эквивалентно -arr. 
</title>
<content> 
</content>
<print>
</print>
</item> 


<item>
<title>
Бинарные функции

add 				Сложить соответственные элементы массивов 

subtract			Вычесть элементы второго массива из соответственных элементов первого  

multiply 			Перемножить соответственные элементы массивов 

divide, 			 
floor_divide 		Деление и деление с отбрасыванием остатка

power 				Возвести элементы первого массива в степени, указанные во втором массиве 

maximum, fmax 		Поэлементный максимум. Функция fmax игнорирует значения NaN 

minimum, fmin 		Поэлементный минимум. Функция fmin игнорирует значения NaN 

mod 				Поэлементный модуль (остаток от деления) 

copysign 			Копировать знаки значений второго массива в соответственные элементы первого массива 

greater 			Поэлементное сравнение, возвращается булев массив. 
greater_equal, 		
less, less_equal, 
equal, not_equal 	Эквивалентны операторам &gt;, &gt;=, &lt;, &lt;=, ==, !=

logical_and,  		
logical_or,
logical_xor  		Вычислить логическое значение истинности логических операций Эквивалентны инфиксным операторам &amp;, |, ^
</title>
<content> 
</content>
<print>
</print>
</item> 

<item>
<title>
Статистические методы массива 

sum 				Сумма элементов всего массива или вдоль одной оси. Для массивов нулевой длины функция sum  возвращает 0

mean 				Среднее арифметическое. Для массивов нулевой длины равно NaN 

std, var 			Стандартное отклонение и дисперсия, соответственно. Может быть задано число степеней свободы (по умолчанию знаменатель равен n) 

min, max 			Минимум и максимум 

argmin, argmax 		Индексы минимального и максимального элемента 

cumsum 				Нарастающая сумма с начальным значением 0

cumprod 			Нарастающее произведение с начальным значением 1  

</title>
<content> 
</content>
<print>
</print>
</item> 

<item>
<title>
Теоретико-множественные операции с массивами 

unique(x) 			Вычисляет отсортированное множество уникальных элементов 

intersect1d(x, у) 	Вычисляет отсортированное множество элементов, общих для х и у 

union1d(x, у) 		Вычисляет отсортированное объединение элементов 

in1d(x, у) 			Вычисляет булев массив, показывающий, какие элементы х встречаются в у 

setdiff1d(x, у) 	Вычисляет разность множеств, т. е. элементы, принадлежащие х, но не принадлежащие у 

setxor1d(x, у) 		Симметрическая разность множеств; элементы, принадлежащие одному массиву, но не обоим сразу 
</title>
<content> 
</content>
<print>
</print>
</item> 

<item>
<title>
Функции из модуля numpy.linalg 

diag 				Возвращает диагональные элементы квадратной матрицы в виде одномерного массива или преобразует одномерный массив в квадратную матрицу, в которой все элементы, кроме находящихся на главной диагонали, равны нулю 

dot 				Вычисляет произведение матриц 

trace 				Вычисляет след матрицы - сумму диагональных элементов 

det 				Вычисляет определитель матрицы 

eig 				Вычисляет собственные значения и собственные векторы квадратной матрицы 

inv 				Вычисляет обратную матрицу 

pinv 				Вычисляет псевдообратную матрицу Мура-Пенроуза для квадратной матрицы 

qr 					Вычисляет QR-разложение 

svd 				Вычисляет сингулярное разложение (SVD) 

solve 				Решает линейную систему Ах = b, где А - квадратная матрица 

lstsq 				Вычисляет решение уравнения y  =  xb по методу наименьших квадратов 
</title>
<content> 
</content>
<print>
</print>
</item> 

<item>
<title>
Наиболее употребительные функции из модуля numpy.random 

seed 			Задает начальное значение генератора случайных чисел 

permutation 	Возвращает случайную перестановку последовательности или диапазона 

shufflе			Случайным образом переставляет последовательность на месте  

rand 			Случайная выборка с равномерным распределением 

randint 		Случайная выборка целого числа из заданного диапазона 

randn 			Случайная выборка с нормальным распределением со средним 0 и стандартным отклонением 1  (интерфейс похож на MATLAB) 

binomial 		Случайная выборка с биномиальным распределением 

normal 			Случайная выборка с нормальным (гауссовым) распределением 

beta 			Случайная выборка с бета-распределением 

chisquare 		Случайная выборка с распределением хи-квадрат 

gamma 			Случайная выборка с гамма-распределением 

uniform 		Случайная выборка с равномерным распределением на полуинтервале [0, 1) 
</title>
<content> 
</content>
<print>
</print>
</item>

<item>
<title>
Функции конкатенации массива 

concatenate 		Самая общая функция - конкатенирует коллекцию массивов вдоль указанной оси 

vstack, row_stack 	Составляет массивы по строкам (вдоль оси 0) 

hstack 				Составляет массивы по столбцам (вдоль оси 1) 

column_stack		Аналогична hstack, но сначала преобразует одномерные массивы с двумерные векторы по столбцам 

dstack 				Составляет массивы по в глубину (вдоль оси 2) 

split 				Разбивает массив в указанных позициях вдоль указанной оси 

hsplit / vsplit		Вспомогательные функции для разбиения по оси 0,1 и 2 соответственно 
/ dsplit 
</title>
<content> 
</content>
<print>
</print>
</item>

<item>
<title>
Методы u-функций

reduce(x) 			Агрегирует значения путем последовательного применения операции 

accurnulate(x)		Агрегирует все промежуточные агрегаты 

reduceat(x, bins) 	«Локальная» редукция, или «group bу». Редуцирует соседние срезы данных и порождает массив агрегатов 

outer(x, у) 		Применяет операцию ко всем парам элементов х и у. Результирующий массив имеет форму х.shape +  у.shape 
</title>
<content> 
</content>
<print>
</print>
</item>

<item>
<title>
Importing/exporting

np.loadtxt('file.txt') 	From a text file

np.genfromtxt('file.csv',delimiter=',') 	From a CSV file

np.savetxt('file.txt',arr,delimiter=' ') 	Writes to a text file

np.savetxt('file.csv',arr,delimiter=',') 	Writes to a CSV file
</title>
<content> 
</content>
<print>
</print>
</item>

<item>
<title>
Creating Arrays

np.array([1,2,3]) 	One dimensional array

np.array([(1,2,3),(4,5,6)]) 	Two dimensional array

np.zeros(3) 	1D array of length 3 all values 0

np.ones((3,4)) 	3x4 array with all values 1

np.eye(5) 	5x5 array of 0 with 1 on diagonal (Identity matrix)

np.linspace(0,100,6) 	Array of 6 evenly divided values from 0 to 100

np.arange(0,10,3) 	Array of values from 0 to less than 10 with step 3 (eg [0,3,6,9])

np.full((2,3),8) 	2x3 array with all values 8

np.random.rand(4,5) 	4x5 array of random floats between 0-1

np.random.rand(6,7)*100 	6x7 array of random floats between 0-100

np.random.randint(5,size=(2,3)) 	2x3 array with random ints between 0-4
</title>
<content> 
</content>
<print>
</print>
</item>


<item>
<title>
Inspecting Properties

arr.size 	Returns number of elements in arr

arr.shape 	Returns dimensions of arr (rows,columns)

arr.dtype 	Returns type of elements in arr

arr.astype(dtype) 	Convert arr elements to type dtype

arr.tolist() 		Convert arr to a Python list

np.info(np.eye) 	View documentation for np.eye
</title>
<content> 
</content>
<print>
</print>
</item>

<item>
<title>
Copying/sorting/reshaping

np.copy(arr) 		Copies arr to new memory

arr.view(dtype) 	Creates view of arr elements with type dtype

arr.sort() 			Sorts arr

arr.sort(axis=0) 	Sorts specific axis of arr

two_d_arr.flatten() 	Flattens 2D array two_d_arr to 1D

arr.T 				Transposes arr (rows become columns and vice versa)

arr.reshape(3,4) 	Reshapes arr to 3 rows, 4 columns without changing data

arr.resize((5,6)) 	Changes arr shape to 5x6 and fills new values with 0
</title>
<content> 
</content>
<print>
</print>
</item>


<item>
<title>
Adding/removing Elements

np.append(arr,values) 		Appends values to end of arr

np.insert(arr,2,values) 	Inserts values into arr before index 2

np.delete(arr,3,axis=0) 	Deletes row on index 3 of arr

np.delete(arr,4,axis=1) 	Deletes column on index 4 of arr
</title>
<content> 
</content>
<print>
</print>
</item>


<item>
<title>
Combining/splitting

np.concatenate((arr1,arr2),axis=0) 	Adds arr2 as rows to the end of arr1

np.concatenate((arr1,arr2),axis=1) 	Adds arr2 as columns to end of arr1

np.split(arr,3) 	Splits arr into 3 sub-arrays

np.hsplit(arr,5) 	Splits arr horizontally on the 5th index
</title>
<content> 
</content>
<print>
</print>
</item>

<item>
<title>
Indexing/slicing/subsetting

arr[5] 		Returns the element at index 5

arr[2,5] 	Returns the 2D array element on index [2][5]

arr[1]=4 	Assigns array element on index 1 the value 4

arr[1,3]=10 	Assigns array element on index [1][3] the value 10

arr[0:3] 	Returns the elements at indices 0,1,2 (On a 2D array: returns rows 0,1,2)

arr[0:3,4] 	Returns the elements on rows 0,1,2 at column 4

arr[:2] 	Returns the elements at indices 0,1 (On a 2D array: returns rows 0,1)

arr[:,1] 	Returns the elements at index 1 on all rows

arr&lt;5 	Returns an array with boolean values

(arr1&lt;3) &amp; (arr2&gt;5) 	Returns an array with boolean values

~arr 	Inverts a boolean array

arr[arr&lt;5] 	Returns array elements smaller than 5
</title>
<content> 
</content>
<print>
</print>
</item>

<item>
<title>
Scalar Math

np.add(arr,1) 		Add 1 to each array element

np.subtract(arr,2) 	Subtract 2 from each array element

np.multiply(arr,3) 	Multiply each array element by 3

np.divide(arr,4) 	Divide each array element by 4 (returns np.nan for division by zero)

np.power(arr,5) 	Raise each array element to the 5th power
</title>
<content> 
</content>
<print>
</print>
</item>

<item>
<title>
Vector Math

np.add(arr1,arr2) 			Elementwise add arr2 to arr1

np.subtract(arr1,arr2) 		Elementwise subtract arr2 from arr1

np.multiply(arr1,arr2) 		Elementwise multiply arr1 by arr2

np.divide(arr1,arr2) 		Elementwise divide arr1 by arr2

np.power(arr1,arr2) 		Elementwise raise arr1 raised to the power of arr2

np.array_equal(arr1,arr2) 	Returns True if the arrays have the same elements and shape

np.sqrt(arr) 	Square root of each element in the array

np.sin(arr) 	Sine of each element in the array

np.log(arr) 	Natural log of each element in the array

np.abs(arr) 	Absolute value of each element in the array

np.ceil(arr) 	Rounds up to the nearest int

np.floor(arr) 	Rounds down to the nearest int

np.round(arr) 	Rounds to the nearest int
</title>
<content> 
</content>
<print>
</print>
</item>

<item>
<title>
Statistics

np.mean(arr,axis=0) 	Returns mean along specific axis

arr.sum() 				Returns sum of arr

arr.min() 				Returns minimum value of arr

arr.max(axis=0) 		Returns maximum value of specific axis

np.var(arr) 			Returns the variance of array

np.std(arr,axis=1) 		Returns the standard deviation of specific axis

arr.corrcoef() 			Returns correlation coefficient of array
</title>
<content> 
</content>
<print>
</print>
</item>

</data>