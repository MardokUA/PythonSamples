<?xml version="1.0" encoding="UTF-8"?>
<data>
<item>
<title>Длина строки - len()</title>
<content>
str = 'abcd'
print(len(str))
</content>
<print>
4
</print>
</item>
<item>
<title>Конкатенация строк</title>
<content>
str = 'abc'+'def'
print(str)
</content>
<print>
abcdef
</print>
</item>
<item>
<title>Повторение строк</title>
<content>
myjob = 'hacker' 
for c in myjob: 
	print(c, end=' ')
</content>
<print>
h a c k e r
</print>
</item>
<item>
<title>Поиск в строке</title>
<content>
myjob = 'hacker'
print('k' in myjob)
</content>
<print>
true
</print>
</item>
<item>
<title>Поиск в строке с возвратом позиции - find()</title>
<content>
myjob = 'hacker'
print(myjob.find('k'))
</content>
<print>
3
</print>
</item>
<item>
<title>Обращение к элементу строки по индексу</title>
<content>
s = 'python'
print(s[0]+'  '+s[-2])
</content>
<print>
p  o
</print>
</item>
<item>
<title>Срезы - извлечение подстроки</title>
<content>
s = 'python'
print(s[1:3]+'  '+s[1:]+'  '+s[:-1])
</content>
<print>
yt  ython  pytho
</print>
</item>
<item>
<title>Срезы-извлечение подстроки(2)</title>
<content>
'''
Извлекает каждый 2-й элемент
последовательности в диапазоне от 1 до 9
'''
s='learning_python'  
print(s[1:10:2])
</content>
<print>
erigp
</print>
</item>
<item>
<title>Срезы-извлечение подстроки(3)</title>
<content>
'''
Обратный срез извлекает каждый 2-й элемент 
последовательности в диапазоне от -2 до 1
'''
s = 'learning_python'
print(s[-2:1:-2])					
</content>
<print>
nhy_nna
</print>
</item>
<item>
<title>Пребразование из/в строку</title>
<content>
s = int(""42""),str(17),float('1.5')
print(s)
s = '1.234E-10'
print(float(s))
</content>
<print>
(42, '17', 1.5)
1.234e-10
</print>
</item>
<item>
<title>Преобразование одиночного символав его целочисленный код ASCII</title>
<content>
a = ord('s')
print(a)
</content>
<print>
115
</print>
</item>
<item>
<title>Преобразование ASCII кода в символ</title>
<content>
a = chr(115)
print(a)
</content>
<print>
s
</print>
</item>
<item>
<title>Замещение символов в строке - replace()</title>
<content>
s = 'python'
s = s.replace('py', 'kivy')
print(s)
</content>
<print>
kivython
</print>
</item>
<item>
<title>Выражения форматирования строки - %</title>
<content>
'''
s - Строка (для объекта любого другого типа будет выполнен вызов функции str(X), чтобы получить строковое представление объекта)
r - s, но использует функцию repr, а не str
c - Символ
d - Десятичное целое число
i - Целое число
u - То же, что и d (устарел: больше не является представлением целого без знака)
o - Восьмеричное целое число
x - Шестнадцатеричное целое число
X - x, но шестнадцатеричные цифры возвращаются в верхнем регистре
e - Вещественное число в экспоненциальной форме
E - e, но алфавитные символы возвращаются в верхнем регистре
f - Вещественное число в десятичном представлении
F - Вещественное число в десятичном представлении
g - Вещественное число e или f
'''
print('That is %d %s bird!' % (1, 'dead'))
</content>
<print>
That is 1 dead bird!
</print>
</item>
<item>
<title>Форматирование строк из словаря</title>
<content>
l = {'n':1, 'x':'spam'}
str = '%(n)d %(x)s'
print(str % l)
</content>
<print>
1 spam
</print>
</item>
<item>
<title>Форматирование строк из словаря(2)</title>
<content>
reply = '''  
Greetings...
Hello %(name)s!
Your age squared is %(age)s
'''
values = {'name': 'Bob', 'age': 40} 
print (reply % values)
</content>
<print>
Greetings...
Hello Bob!
Your age squared is 40
</print>
</item>
<item>
<title>Спецификаторы формата</title>
<content>
x = 1234
print("integers: ...%d...%6d...%-6d...%06d" % (x, x, x, x))
</content>
<print>
integers: ...1234...  1234...1234  ...001234
</print>
</item>
<item>
<title>Спецификаторы формата(2)</title>
<content>
x = 1.23456789
print('%e | %f | %g' % (x, x, x))
</content>
<print>
1.234568e+00 | 1.234568 | 1.23457
</print>
</item>
<item>
<title>Спецификаторы формата(3)</title>
<content>
x = 1.23456789
print('%-6.2f|%05.2f|%+06.1f' % (x, x, x))
</content>
<print>
1.23  |01.23|+001.2
</print>
</item>
<item>
<title>Метод форматирования строки - format()</title>
<content>
print('That is {0} {1} bird!'.format(1, 'dead'))
</content>
<print>
That is 1 dead bird!
</print>
</item>
<item>
<title>Метод форматирования строки(2) - format()</title>
<content>
template = '{0}, {1} and {2}'
print(template.format('spam', 'ham', 'eggs'))
</content>
<print>
spam, ham and eggs
</print>
</item>
<item>
<title>Метод форматирования строки(3) - format()</title>
<content>
template = '{motto}, {pork} and {food}'
print(template.format(motto = 'spam', pork = 'ham', food = 'eggs'))
</content>
<print>
spam, ham and eggs
</print>
</item>
<item>
<title>Метод форматирования строки(4) - format()</title>
<content>
import sys
str = 'My {1[spam]} runs {0.platform}'.format(sys, {'spam': 'laptop'})
print(str)
str = 'My {config[spam]} runs {sys.platform}'.format(sys = sys,config = {'spam': 'laptop'})
print(str)
</content>
<print>
My laptop runs win32
My laptop runs win32
</print>
</item>
<item>
<title>Метод форматирования строки(5) - format()</title>
<content>
l = list('SPAM')
print('first = {0[0]}, third = {0[2]}'.format(l))
parts = l[0], l[-1], l[1:3]
print('first = {0}, last = {1}, middle = {2}'.format(*parts))
</content>
<print>
first = S, third = A
first = S, last = M, middle = ['P', 'A']
</print>
</item>
<item>
<title>Метод форматирования строки - выравнивание</title>
<content>
import sys
print('|{0.platform:&gt;10}| = |{1[item]:&lt;10}|'.format(sys, dict(item = 'laptop')))
</content>
<print>
|     win32| = |laptop    |
</print>
</item>
<item>
<title>Метод форматирования строки (7) - format()</title>
<content>
print('{0:e}, {1:.3e}, {2:g}'.format(3.14159, 3.14159, 3.14159))
print('{0:f}, {1:.2f}, {2:06.2f}'.format(3.14159, 3.14159, 3.14159))
</content>
<print>
3.141590e+00, 3.142e+00, 3.14159
3.141590, 3.14, 003.14
</print>
</item>
<item>
<title>Метод форматирования вывода цифр - format()</title>
<content>
print('{:,d}'.format(9999999999))
print('{:,.2f}'.format(296999.2567))
</content>
<print>
9,999,999,999
296,999.26
</print>
</item>
<item>
<title>Длина строки - len()</title>
<content>
str = 'hello'
print(len(str))
</content>
<print>
5
</print>
</item>
<item>
<title>Вставка кавычек и апострофов в строку</title>
<content>
str = "first\"s",'second\'s'
print(str)
</content>
<print>
('firs"t', "second's")
</print>
</item>
<item>
<title>Преобразование строки в список -></title>
<content>
s = 'spammy'
l = list(s)
print(l)
</content>
<print>
['s', 'p', 'a', 'm', 'm', 'y']
</print>
</item>
<item>
<title>-> и обратно</title>
<content>
s = 'spammy'
l = list(s)
l[3] = 'x'
l[4] = 'x'
s = ''.join(l)
print(s)
</content>
<print>
spaxxy
</print>
</item>
<item>
<title>Строка-разделитель - join()</title>
<content>
s = '-|-'.join(['I','like','python'])
print(s)
</content>
<print>
I-|-like-|-python
</print>
</item>
<item>
<title>Строковый метод - split()</title>
<content>
line = 'bob,hacker,40'
print(line.split(','))
</content>
<print>
['bob', 'hacker', '40']
</print>
</item>
<item>
<title>Удаление пустых символов с конца строки - rstrip()</title>
<content>
line="The knights who say Ni!\n"
print(line.rstrip())
</content>
<print>
The knights who say Ni!
</print>
</item>
<item>
<title>Пребразование символов в заглавные - upper()</title>
<content>
line="The knights who say Ni!\n"
print(line.upper())
</content>
<print>
THE KNIGHTS WHO SAY NI!
</print>
</item>
<item>
<title>Проверка символов на принадлежность к буквам - isalpha()</title>
<content>
line="The knights who say Ni!\n"
print(line.isalpha())
</content>
<print>
False
</print>
</item>
<item>
<title>Проверка окончания строки - endswith()</title>
<content>
line="The knights who say Ni!\n"
print(line.endswith('Ni!\n'))
#Выполняется быстрее
print(line[-4:] == "Ni!\n")
</content>
<print>
True
True
</print>
</item>
<item>
<title>Удаление символов из строки</title>
<content>
line="The knights who say Ni!\n"
line = line.translate({ord(c): None for c in '!@#$'})
print(line)
import re
line = re.sub('[!@#$]', '', line)
print(line)
</content>
<print>
The knights who say Ni
The knights who say Ni
</print>
</item>
<item>
<title>Проверка начала строки - startswith()</title>
<content>
line="The knights who say Ni!\n"
print(line.startswith('The'))
#Выполняется быстрее
print(line[:3]=="The")
</content>
<print>
True
True
</print>
</item>
	
<item>
<title>Сравнивание строк</title>
<content>
s1 = 'hello'
s2 = 'hello'
'''
Оператор == проверяет равенство значений. Интерпретатор выполняет
проверку на равенство, рекурсивно сравнивая все вложенные объекты.
'''
print(s1 == s2)
'''
Оператор is проверяет идентичность объектов. Интерпретатор проверяет,
являются ли сравниваемые объекты одним и тем же объектом (то есть расположены ли они по одному и тому же адресу в памяти).
'''
print(s1 is s2)
s3 = 'abc'
s4 = 'adc'
print(s1 > s2)
</content>
<print>
True
True
False
</print>
</item>
<item>
<title>Модуль re</title>
<content>
import re
'''
Конструкция (.*) означает ноль или более (*) любых символов (.), которые должны
сохраняться в виде подстроки совпадения (())
'''
S = 'Bugger all down here on earth!'
B = b'Bugger all down here on earth!' 
a = re.match('(.*) down (.*) on (.*)', S).groups() 
b = re.match(b'(.*) down (.*) on (.*)', B).groups() 
print(a)
print(b)
</content>
<print>
('Bugger all', 'here', 'earth!')
(b'Bugger all', b'here', b'earth!')
</print>
</item>
<item>
<title>Разбор XML</title>
<content>
'''
myfile.xml
&lt;books>
    &lt;date>2009&lt;/date>
    &lt;title>Learning Python&lt;/title>
    &lt;title>Programming Python&lt;/title>
    &lt;title>Python Pocket Reference&lt;/title>
	&lt;publisher>O’Reilly Media&lt;/publisher>
&lt;/books>
'''
from xml.dom.minidom import parse, Node
xmltree = parse('myfile.xml')
for node1 in xmltree.getElementsByTagName('title'):
    for node2 in node1.childNodes:
        if node2.nodeType == Node.TEXT_NODE:
            print(node2.data)
</content>
<print>
Learning Python
Programming Python
Python Pocket Reference
</print>
</item>
</data>