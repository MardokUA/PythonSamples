<?xml version="1.0" encoding="UTF-8"?>

<data>

<item>
<title>Группировка по ключам/вычисление среднего/размер</title>
<content> 
import numpy as np
import pandas as pd
from pandas import Series, DataFrame


df = DataFrame({'key1' : ['a', 'a', 'b', 'b', 'a'],
                   'key2' : ['one', 'two', 'one', 'two', 'one'],
                    'data1' : np.random.randn(5),
                    'data2' : np.random.randn(5)})

states = np.array(['Ohio', 'California', 'California', 'Ohio', 'Ohio'])
years = np.array([2005, 2005, 2006, 2005, 2006])

print(df,end='\n\n')
print(df['data1'].groupby(df['key1']).mean(),end='\n\n')
print(df['data1'].groupby([states, years]).mean(),end='\n\n')
print(df.groupby(['key1', 'key2']).size(),end='\n\n')
</content>
<print>
      data1     data2 key1 key2
0 -0.233091  0.052449    a  one
1  1.014173 -0.280138    a  two
2 -0.610911  0.254683    b  one
3  1.557628  0.310622    b  two
4  1.891275  0.456131    a  one

key1
a    0.890786
b    0.473358
Name: data1, dtype: float64

California  2005    1.014173
            2006   -0.610911
Ohio        2005    0.662269
            2006    1.891275
Name: data1, dtype: float64

key1  key2
a     one     2
      two     1
b     one     1
      two     1
dtype: int64
</print>
</item>

<item>
<title>Обход групп</title>
<content> 
import numpy as np
import pandas as pd
from pandas import Series, DataFrame

df = DataFrame({'key1' : ['a', 'a', 'b', 'b', 'a'],
                   'key2' : ['one', 'two', 'one', 'two', 'one'],
                    'data1' : np.random.randn(5),
                    'data2' : np.random.randn(5)})

print(df,end='\n\n')

for name, group in df.groupby('key1'):
     print(name)
     print(group,end='\n\n')

'''
В случае нескольких ключей первым элементом кортежа будет кортеж, содержащий значения ключей
'''
for (k1, k2), group in df.groupby(['key1', 'key2']):
        print (k1, k2)
        print (group,end='\n\n')
</content>
<print>
      data1     data2 key1 key2
0 -0.877496  0.403621    a  one
1  0.170725  2.274369    a  two
2  0.404032 -0.213540    b  one
3  0.780361  0.129255    b  two
4 -1.655188  0.448684    a  one

a
      data1     data2 key1 key2
0 -0.877496  0.403621    a  one
1  0.170725  2.274369    a  two
4 -1.655188  0.448684    a  one

b
      data1     data2 key1 key2
2  0.404032 -0.213540    b  one
3  0.780361  0.129255    b  two

a one
      data1     data2 key1 key2
0 -0.877496  0.403621    a  one
4 -1.655188  0.448684    a  one

a two
      data1     data2 key1 key2
1  0.170725  2.274369    a  two

b one
      data1    data2 key1 key2
2  0.404032 -0.21354    b  one

b two
      data1     data2 key1 key2
3  0.780361  0.129255    b  two
</print>
</item>

<item>
<title>Группировка по уровням индекса </title>
<content> 
import numpy as np
import pandas as pd
from pandas import Series, DataFrame

columns = pd.MultiIndex.from_arrays([['US', 'US', 'US', 'JP', 'JP'],
                                        [1, 3, 5, 1, 3]], names=['cty', 'tenor'])

hier_df = DataFrame(np.random.randn(4, 5), columns=columns)

print (hier_df,end='\n\n')
print (hier_df.groupby(level='cty', axis=1).count(),end='\n\n')
</content>
<print>
cty          US                            JP          
tenor         1         3         5         1         3
0      0.323779 -0.124714 -0.298186 -1.035420  2.184965
1     -1.671095 -1.399012 -2.199690 -1.637548  0.982262
2      0.389026 -0.036713  0.889183  0.390412  1.004523
3      0.427959  0.895415 -1.054257  0.376230 -0.008952

cty  JP  US
0     2   3
1     2   3
2     2   3
3     2   3
</print>
</item>

<item>
<title>Групповое взвешенное среднее и корреляция </title>
<content> 
import numpy as np
import pandas as pd
from pandas import Series, DataFrame

df = DataFrame({'category': ['a', 'a', 'a', 'a', 'b', 'b', 'b', 'b'],
                    'data': np.random.randn(8),
                    'weights': np.random.rand(8)})

print (df,end='\n\n')
grouped = df.groupby('category')
get_wavg = lambda g: np.average(g['data'], weights=g['weights'])
print (grouped.apply(get_wavg),end='\n\n')
</content>
<print>
  category      data   weights
0        a -0.205636  0.932480
1        a -0.240191  0.342228
2        a  0.701988  0.874741
3        a  0.774522  0.785103
4        b -0.982988  0.406458
5        b -0.019618  0.979014
6        b -1.456669  0.634408
7        b -2.259708  0.952324

category
a    0.323111
b   -1.175843
dtype: float64
</print>
</item>

</data>