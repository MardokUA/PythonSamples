<?xml version="1.0" encoding="UTF-8"?>
<data>
<item>
<title>Таймер</title>
<content> 
import time
def timer(func, *pargs, **kargs):
    start = time.clock()
    ret = func(*pargs, **kargs)
    elapsed = time.clock() - start
    return (elapsed, ret)
# Использование
import sys
reps = 1000000
repslist = range(reps) 
def forLoop():
    res = []
    for x in repslist:
        res.append(abs(x))
    return res
def listComp():
    return [abs(x) for x in repslist]
def mapCall():
    return list(map(abs, repslist))    
def genExpr():
    return list(abs(x) for x in repslist) 
def genFunc():
    def gen():
        for x in repslist:
            yield abs(x)
    return list(gen())
print(sys.version)
for test in (forLoop, listComp, mapCall, genExpr, genFunc):
    elapsed, result = timer(test)
    print('-' *33)
    print(' % -9s: % .5f = > [ % s... % s]' %
    (test.__name__, elapsed, result[0], result[-1]))
</content>
<print>
3.6.1 (v3.6.1:69c0db5, Mar 21 2017, 17:54:52) [MSC v.1900 32 bit (Intel)]
---------------------------------
 forLoop  :  0.92299 = > [ 0... 999999]
---------------------------------
 listComp :  0.53183 = > [ 0... 999999]
---------------------------------
 mapCall  :  0.27382 = > [ 0... 999999]
---------------------------------
 genExpr  :  0.70114 = > [ 0... 999999]
---------------------------------
 genFunc  :  0.63332 = > [ 0... 999999]
</print>
</item> 
<item>
<title>pickle</title>
<content> 
'''
Модуль pickle преобразует объекты, находящиеся в памяти, в последовательности байтов (в действительности – в строки), которые можно
сохранять в файлах, передавать по сети и так далее. При извлечении объектов происходит обратное преобразование: из последовательности
байтов в идентичные объекты в памяти.
'''
class someClass:
    name = 'someClassName'
import pickle
filename = 'data.txt'
object = someClass()
# Создать внешний файл
file   = open(filename, 'wb') 
# Сохранить объект в файле
pickle.dump(object, file)     
file = open(filename, 'rb')
# Позднее извлечь обратно
object = pickle.load(file)
print(object)
</content>
<print>
&lt;__main__.someClass object at 0x009A1690>
</print>
</item> 
<item>
<title>shelve</title>
<content> 
class someClass:
    name = 'someClassName'
    def __str__(self):
        return str(self.__class__) + ' ' + self.name
import shelve
filename = 'data.txt'
object = someClass()
dbase  = shelve.open('filename')
# Сохранить под ключом key
dbase['key'] = object          
dbase  = shelve.open('filename')
# Позднее извлечь обратно
object = dbase['key'] 
print(object)
</content>
<print>
&lt;class '__main__.someClass'> someClassName
</print>
</item> 
 
</data>