<?xml version="1.0" encoding="UTF-8"?>
<data>
<item>
<title>try/except
Перехватывает исключения, возбужденные интерпретатором или вашим программным кодом, и выполняет восстановительные операции.
try/finally
Выполняет заключительные операции независимо от того, возникло исключение или нет.
raise
Дает возможность возбудить исключение программно.
assert
Дает возможность возбудить исключение программно, при выполнении определенного условия.
with/as
Реализует менеджеры контекста в версиях Python 2.6 и 3.0 (в версии 2.5 является дополнительным расширением).</title>
<content> 
</content>
<print>
</print>
</item> 
<item>
<title>
# Сначала выполняются эти действия
try:
	statements    
	
# Запускается, если в блоке try возникло исключение name1
except name1:
	statements
# Запускается, если возникло любое из этих исключений
except (name2, name3):
	statements	   
'''	
Запускается в случае исключения name4 и получает экземпляр исключения
'''
except name4 as data:
    statements     
'''
Запускается для всех (остальных) возникших исключений
'''
except:
    statements     
'''
Запускается, если в блоке try не возникло исключения
'''
else:
    statements     
# Запускается в любом случае
finally:
	statements	   
</title>
<content> 
</content>
<print>
</print>
</item> 
<item>
<title>
# Перехватывает все (остальные) типы исключений.
except: 				
# Перехватывает только указанное исключение.
except name: 			
# Перехватывает указанное исключение и получает соответствующий экземпляр.
except name as value: 	
# Перехватывает любое из перечисленных исключений.
except (name1, name2): 	
# Перехватывает любое из перечисленных исключений и получает соответствующий экземпляр.
except (name1, name2) as value:	
# Выполняется, если не было исключений.
else:					
# Этот блок выполняется всегда.
finally: 				
</title>
<content> 
</content>
<print>
</print>
</item> 
<item>
<title>
Инструкция with/as может использоваться как альтернатива известной идиомы try/finally  подобно этой инструкции она предназначена для выполнения заключительных операций независимо от того, возникло ли исключение на этапе выполнения основного действия. Однако, в отличие от инструкции try/finally, инструкция with поддерживает более богатый возможностями протокол, позволяющий определять как предварительны 
with open(r'C:\misc\data') as myfile:
    for line in myfile:
print(line)
Вызываемая функция open возвращает объект файла, который присваивается имени myfile. Применительно к переменной myfile мы можем использовать обычные средства, предназначенные для работы с файлами, – в данном случае с помощью итератора выполняется чтение строки за строкой в цикле for. Однако данный объект поддерживает протокол управления контекстом, используемый инструкцией with. После того как инструкция with начнет выполнение, механизм управления контекстом гарантирует, что объект файла, на который ссылается переменная myfile, будет закрыт автоматически, даже если в цикле for во время обработки файла произойдет исключение.
</title>
<content> 
</content>
<print>
</print>
</item> 
</data>