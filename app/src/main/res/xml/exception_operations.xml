<?xml version="1.0" encoding="UTF-8"?>
<data>
<item>
<title>Обработка исключений</title>
<content> 
def fetcher(x):
    return x/0
try:
    fetcher(1)
	
# Перехватывает и обрабатывает исключение
except ZeroDivisionError as msg: 
    print(msg)
</content>
<print>
division by zero
</print>
</item>
<item>
<title>Возбуждение исключений</title>
<content> 
try:
	# Возбуждает исключение вручную
	raise IndexError 
	
except IndexError:
    print('got exception')
</content>
<print>
got exception
</print>
</item> 
<item>
<title>Пользовательские исключения</title>
<content> 
# Пользовательское исключение
class Bad(Exception): 
    pass
def doomed():
	# Вызывает экземпляр исключения
	raise Bad() 
try:
    doomed()
	
# Перехватить исключение по имени класса
except Bad: 
    print('got Bad')
</content>
<print>
got Bad
</print>
</item> 
<item>
<title>Заключительные операции - finally</title>
<content> 
def fetcher(x):
    return x/0
try:
    fetcher(1)
	
# Перехватывает и обрабатывает исключение
except ZeroDivisionError as msg: 
    print(msg)
finally:
    print('after except')
</content>
<print>
division by zero
after except
</print>
</item> 
<item>
<title>Запись ошибки в файл</title>
<content> 
class FormatError(Exception):
    logfile = 'formaterror.txt'
    
	def __init__(self, line, file):
		self.line = line
		self.file = file
    
	def logerror(self):
        log = open(self.logfile, 'a')
		print('Error at', self.file, self.line, file=log)
def parser():
    raise FormatError(40, 'spam.txt')
try:
    parser()
except FormatError as exc:
    exc.logerror()
</content>
<print>
#in formaterror.txt
Error at spam.txt 40
</print>
</item> 
</data>