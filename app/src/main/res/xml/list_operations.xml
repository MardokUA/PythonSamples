<?xml version="1.0" encoding="UTF-8"?>
<data>
<item>
<title>Инициализация списка</title>
<content> 
l=[]
</content>
<print>
</print>
</item> 
<item>
<title>Длина списка</title>
<content> 
l=[1,2,3]
print(len(l))
</content>
<print>
3
</print>
</item> 
<item>
<title>Конкатенация списков</title>
<content> 
l = [1, 2, 3]
s = [4, 5, 6]
print(l + s)
</content>
<print>
[1, 2, 3, 4, 5, 6]
</print>
</item> 
<item>
<title>Повторение списков</title>
<content> 
s = [4, 5, 6]
print(s * 2)
</content>
<print>
[4, 5, 6, 4, 5, 6]
</print>
</item> 
<item>
<title>Проверка на вхождение</title>
<content> 
l = [1, 2, 3]
print(3 in l)
</content>
<print>
True
</print>
</item> 
<item>
<title>Итерация списка</title>
<content> 
for x in [1, 2, 3]:
	print(x, end=" ")
</content>
<print>
1 2 3
</print>
</item> 
<item>
<title>Доступ к элементу / Срезы</title>
<content> 
l=['one', 'two', 'three']
print(l[2])
print(l[-2])
print(l[1:])
</content>
<print>
one
three
['two', 'three']
</print>
</item> 
<item>
<title>Двумерный массив</title>
<content> 
m=[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print(m[1])
print(m[1][1])
</content>
<print>
[4, 5, 6]
5
</print>
</item> 
<item>
<title>Присваивание по срезам</title>
<content> 
l=[1, 2, 3]
l[0:2]=[10, 11]
print(l)
</content>
<print>
[10, 11, 3]
</print>
</item> 
<item>
<title>Добавление элемента - append()</title>
<content> 
l=[1, 2, 3]
l.append('hello')
print(l)
</content>
<print>
[1, 2, 3, 'hello']
</print>
</item> 
<item>
<title>Сортировка - sort()</title>
<content> 
l=['Dog','cat' ,'Mouse' ]
#Сортировка с учетом регистра символов
l.sort() 
print(l)
#Сортировка с учетом нижнего регистра
l.sort(key=str.lower)  
print(l)
#Обратная сортировка
l.sort(key=str.lower,reverse=True) 
print(l)
</content>
<print>
['Dog', 'Mouse', 'cat']
['cat', 'Dog', 'Mouse']
['Mouse', 'Dog', 'cat']
</print>
</item> 
<item>
<title>Сортировка с возвратом результата - sorted()</title>
<content> 
l=['Dog','cat' ,'Mouse' ]
l = sorted(l, key=str.lower, reverse=True)
print(l)
s = sorted([x.lower() for x in l], reverse=True)
print(s)
</content>
<print>
['Mouse', 'Dog', 'cat']
['mouse', 'dog', 'cat']
</print>
</item> 
<item>
<title>Добавление нескольких элементов в конец списке - extend()</title>
<content> 
l=[1, 2]
l.extend([3, 4, 5])
print(l)
</content>
<print>
[1, 2, 3, 4, 5]
</print>
</item> 
<item>
<title>Удаление и возврат элемента - pop()</title>
<content> 
l=[1, 2, 3, 4, 5]
print(l.pop(),'-',l)
print(l.pop(1),'-',l)
</content>
<print>
5 - [1, 2, 3, 4]
2 - [1, 3, 4]
</print>
</item> 
<item>
<title>Реверс списка - reverse()</title>
<content> 
l=[1, 2, 3, 4, 5]
l.reverse()
print(l)
</content>
<print>
[5, 4, 3, 2, 1]
</print>
</item> 
<item>
<title>Встроенная функция сортировки - reversed()</title>
<content> 
l=[1, 2, 3, 4, 5]
print(list(reversed(l)))
</content>
<print>
[5, 4, 3, 2, 1]
</print>
</item> 
<item>
<title>Вставка элемента в нужную позицию - insert()</title>
<content> 
l=['one', 'two', 'three']
l.insert(1,'four')
print(l)
</content>
<print>
['one', 'four', 'two', 'three']
</print>
</item> 
<item>
<title>Удаление элемента с определенным значением - remove()</title>
<content> 
l=['one', 'two', 'three']
l.remove('two')
print(l)
</content>
<print>
['one', 'three']
</print>
</item> 
<item>
<title>Удаление элемента по индексу - del</title>
<content> 
l=['one', 'two', 'three']
del l[0]
print(l)
</content>
<print>
['two', 'three']
</print>
</item> 
<item>
<title>Удаление сегмента списка - del</title>
<content> 
l=['one', 'two', 'three']
del l[1:]
print(l)
l=['one', 'two', 'three']
l[1:]=[]
print(l)
</content>
<print>
['one']
['one']
</print>
</item> 
<item>
<title>Удаление и возврат значения - pop()</title>
<content> 
l=['one', 'two', 'three']
# Удаление и возврат последнего элемента
l.pop()  
print(l)
# Удаление и возврат элемента с заданой позиции 
l.pop(1)  
print(l)
</content>
<print>
['one', 'two'] 
['one']
</print>
</item> 
<item>
<title>Сравнение списков</title>
<content>
L1 = [2, 3, 4]
L2 = [2, 3, 4]
'''
Оператор == проверяет равенство значений. Интерпретатор выполняет
проверку на равенство, рекурсивно сравнивая все вложенные объекты.
'''
print(L1 == L2)
'''
Оператор is проверяет идентичность объектов. Интерпретатор проверяет,
являются ли сравниваемые объекты одним и тем же объектом (то есть расположены ли они по одному и тому же адресу в памяти).
'''
print(L1 is L2)
L1 = [1, ('a', 3)]
L2 = [1, ('b', 2)]
print(L1 &lt; L2, L1 &gt; L2)
</content>
<print>
True
False
False True
</print>
</item> 
<item>
<title>Сумма списка,макс/мин элемент - sum(), max(), min()</title>
<content>
l = [1, 22, 54, 3]
print(sum(l))
print(max(l))
print(min(l))
</content>
<print>
80
54
1
</print>
</item>
<item>
<title>Проверка на истинность массива - any(), all()</title>
<content> 
'''
Функция sum вычисляет сумму всех чисел в любом итерируемом объекте. Встроенные функции any и all возвращают True, если любой (any) или все (all) элементы итерируемого объекта являются истинными значениями соответственно
'''
l = [1, '', 25]
print(any(l))
print(all(l))
</content>
<print>
True
False
</print>
</item>
</data>