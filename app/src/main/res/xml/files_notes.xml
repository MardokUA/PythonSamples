<?xml version="1.0" encoding="UTF-8"?>
<data>
<item>
<title>
Чтобы открыть файл, программа должна вызвать функцию open, передав ей имя внешнего файла и режим работы. Обычно в качестве режима используется строка 'r', когда файл открывается для чтения (по умолчанию), 'w' – когда файл открывается для записи или 'a' – когда файл открывается на запись в конец 
</title>
<content> 
</content>
<print>
</print>
</item> 
<item>
<title>
Для чтения строк лучше использовать итераторы файлов.Cамый лучший,пожалуй, способ чтения строк из файла на сегодняшний день состоит в том, чтобы вообще не использовать операцию чтения из файла, файлы имеют итератор, который автоматически читает информацию из файла строку за строкой в контексте цикла for, в генераторах списков и в других итерационных контекстах.
</title>
<content> 
</content>
<print>
</print>
</item> 
<item>
<title>
Содержимое файлов находится в строках, а не в объектах. Обратите внимание: что данные, получаемые из файла,всегда попадают в сценарий в виде строки, поэтому необходимо будет выполнять преобразование данных в другие типы объектов языка Python,если эта форма представления вам не подходит. Точно так же, при выполнении операции записи данных в файл, в отличие от инструкции print,интерпретатор Python не выполняет автоматическое преобразование объектов в строки – вам необходимо передавать методам уже сформированные строки. Поэтому при работе с файлами вам пригодятся инструменты преобразования данных из строкового представления в числовое и наоборот (например, int, float, str, а также выражения форматирования строк и метод format). Кроме того, в состав Python входят дополнительные стандартные библиотечные инструменты, предназначенные для работы с универсальным объектом хранилища данных (например, модульpickle) и обработки упакованных двоичных данных в файлах (например,модуль struct).
</title>
<content> 
</content>
<print>
</print>
</item> 
<item>
<title>
Менеджеры контекста файлов позволяют обертывать программный код,выполняющий операции с файлами, дополнительным слоем логики, который гарантирует, что после выхода за пределы блока инструкций менеджера файл будет закрыт автоматически, и позволяет не полагаться на автоматическое закрытие файлов механизмом сборки мусора 
</title>
<content> 
</content>
<print>
</print>
</item> 
</data>